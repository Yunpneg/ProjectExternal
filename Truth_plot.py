from keras.applications import VGG16
from sklearn.cluster import AgglomerativeClustering, KMeans
from keras.layers import Dense, Dropout, GlobalAveragePooling2D
from keras.models import Model
from keras.preprocessing.image import load_img, img_to_array
import numpy as np
import seaborn as sns
import os
from sklearn.metrics import confusion_matrix
import matplotlib.pyplot as plt
from munkres import Munkres, print_matrix
import sys
from sklearn.decomposition import PCA


base_model = VGG16(include_top=False, weights='imagenet', input_shape=(224, 224, 3))
inputShape = (224, 224, 3)  # Assumes 3 channel image

x = base_model.output
x = GlobalAveragePooling2D()(x)
x = Dense(512, activation="relu")(x)
x = Dropout(0.3)(x)
x = Dense(512, activation="relu")(x)
predictions = Dense(9, activation='softmax')(x)
model = Model(inputs=base_model.input, outputs=predictions)
model.load_weights("GAP_D_Drop_D_D.h5")

dirname_path = 'test_data'

t = 0
cluster_number = 9
true_label = []
vgg16_feature_list = []
rawImage_list = []
dir_path_list = os.listdir(dirname_path)
if '.DS_Store' in dir_path_list:
    dir_path_list.remove('.DS_Store')
dir_path_list.sort()
class_item = 0
for dirname in dir_path_list:
    file_path = dirname_path + '/' + dirname
    file_path_list = os.listdir(file_path)
    if '.DS_Store' in file_path_list:
        file_path_list.remove('.DS_Store')
    file_path_list.sort()
    for filename in file_path_list:
        img_path = file_path + '/' + filename
        true_label.append(class_item)
        image = load_img(img_path, target_size=inputShape)
        image = img_to_array(image)  # shape is (224,224,3)
        feature_vectors = np.expand_dims(image, axis=0)  # Now shape is (1,224,224,3)
        feature_vectors = feature_vectors / 255.0
        preds = model.predict(feature_vectors)  # (1, 7, 7, 512). float32
        vgg16_feature_np = np.array(preds)  # (1, 7, 7, 512). array
        vgg16_feature_list.append(vgg16_feature_np.flatten())  # (n, 25088)

    class_item += 1

vgg16_feature_list_np = np.array(vgg16_feature_list)

# x_pos = [[0.041307967, -0.07640644, -0.04758385, -0.07121731, -0.10787893, 0.04391334, -0.06434766, -0.043427218, -0.101766706, -0.075236, -0.10910971, -0.11158527, -0.0479964, 0.5534449, 0.24444765, -0.06695466, -0.055805787, -0.101184584, -0.08940768, -0.10724773, -0.10223812, -0.075176686, -0.06552805, -0.05532864, 0.56636167, -0.067393064, 0.051760513, -0.05800388, 0.6798569, -0.05620772, -0.047098584, -0.099837154, -0.078762814, 0.036339387, -0.11119835, -0.11215128, -0.06916747, -0.10064838, -0.04669023, 0.94186145, 0.12694107, 0.241962, -0.077014215, -0.09167816, 0.0690602, 0.12897554, 0.06567028, 0.13955379, -0.0077707856, -0.06590143, 0.857405, 0.092534795, 0.0635001, 0.43454123, -0.09637231, 0.09744804, -0.06521903, -0.0545415, 0.49234295, -0.110977545, -0.041803654, -0.03628837, 0.07144065, 0.02121873, 0.02508423, 0.12792577, -0.09200029, -0.098764405, -0.04995731, -0.0138885155, -0.08340802, 0.025950959, -0.022663618, -0.09191151, -0.027823951, 0.019919107, -0.10501609, 0.5735512, -0.10585591, 0.0719387, -0.05724124, -0.094884455, -0.10992564, -0.040316466, -0.030321848, -0.015323969, -0.1102177, -0.093529604, -0.08308162, -0.1013851, 0.04705588, -0.10917342, 0.13521558, -0.0942109, 0.015399465, -0.034144506, -0.10871439, -0.102768786, -0.10408562, -0.112016656, -0.0983146, -0.11045031, -0.11122379, -0.10520124, -0.10949547, -0.098321885, -0.100582086, -0.09314298, 0.072972536, 0.12924375, -0.015962668, 0.05473819, 0.11169409, -0.08940351, -0.10561911, -0.0066013723, -0.090370744, 0.036061797, -0.011297459, -0.112374194, -0.1104545, -0.09771729, -0.032288346, -0.10191365, -0.038469948, -0.10662356, -0.07831494, -0.10906596, -0.11108624, -0.08787831, -0.10865271, -0.10505361], [0.3374015, 0.28418127, -0.37634385, -0.2680198, 0.087716766, -0.18016401, 0.04158509, 0.5415063, -0.11027073, 0.11434875, -0.44653657, -0.025404567], [-0.35039932, -0.14614297, 0.07524773, 0.3368874, 0.4002607, 0.31517178, -0.2133669, -0.29357362, -0.14813647, -0.20589429, -0.03230044, -0.035803974, 0.33061177, 0.07741343, -0.10997565], [-0.29327667, 0.20589443, -0.1687615, -0.32740912, -0.22964866, -0.18429378, 0.0861284, -0.04711679, -0.03311963, 0.013828755, 0.011907551, 0.03944491, -0.101231545, -0.25834963, 0.0067562317, 0.19029848, -0.05476002, 0.16707724, -0.20805949, 0.30670667, 0.1927424, 0.25939634, 0.2875473, 0.29526788, -0.03329325, 0.44338426, -0.19085428, 0.34399936, -0.27749118, -0.13582775, -0.13045226, 0.10929491, -0.28572938], [0.5206516, 0.08027288, -0.18394847, -0.11950564, 0.066192694, -0.060032196, -0.28428456, -0.15592653, -0.18422513, -0.19119476, 0.0010343083, -0.17025581, 0.0466217, 0.08225389, 0.20586242, -0.007203618, -0.22538114, 0.13893698, -0.19852522, 0.0106533365, 0.2715497, 0.21979177, 0.023505306, 0.06628637, -0.015226522, -0.026901387, 0.20529166, -0.16752978, -0.21567023, 0.26690584], [-0.021931123, -0.021359779, 0.027660683, -0.007321681, -0.013113258, -0.021882333, 0.030937036, 0.02867332, 0.017180333, 0.11419162, -0.028303303, -0.027217265, -0.020036966, -0.009195559, -0.004174596, -0.011706117, -0.02464532, -0.007754292], [0.5057569, 0.6287385, -0.030527059, -0.07390125, -0.120259814, -0.053273592, -0.30997214, -0.38233137, -0.38796192, -0.3070086, -0.12802038, -0.12593934, 0.2077078, -0.21095012, -0.104884185, -0.03374732, -0.29082242, -0.28983662, -0.070911266, 0.5356622, 0.17109577, 0.25340313, 0.17356837, 0.59893167, -0.14178869, -0.012727328], [-0.23263396, -0.28094795, -0.14376348, -0.054689083, 0.67183214, -0.3196882, -0.2865214, -0.27357742, 0.2800435, 0.13563895, 0.50430703], [0.356791, 0.14788608, -0.05968603, 0.16105467, 0.015188219, -0.08546759, -0.30202663, -0.38517553, -0.11381901, 0.02280495, 0.07331839, 0.5720254, -0.20138256, -0.20151125]]
# y_pos = [[-0.0276119, 0.0049617444, 0.01368096, 0.016673272, 0.022777742, 0.031745326, -0.018030072, -0.032579854, 0.02075778, 0.00530866, 0.021793101, 0.02362074, -0.03142307, 0.11175827, -0.20912422, -0.016438726, -0.020435525, 0.017464716, 0.005879462, 0.019552693, 0.014980368, -0.008163375, -0.018151099, 0.0070263753, -0.022219434, -0.007077962, -0.107791446, -0.0216282, -0.12085189, -0.017398678, -0.01105022, 0.01833139, -0.0031780386, -0.09677543, 0.023705078, 0.0246779, -0.013693758, 0.013613377, 0.0020570694, 0.15667127, -0.06301076, 0.055764347, 0.015935639, 0.012060189, -0.01721085, 0.022674922, -0.035427388, 0.0031337026, 0.026395338, 0.0059037535, 0.24542081, 0.047941856, 0.044650007, 0.058718108, 0.016217649, 0.010530303, 0.02960772, -0.022069376, -0.23853704, 0.02307791, 0.012918305, 0.033672355, -0.072375484, -0.027890079, -0.09859583, -0.08034741, 0.0140898125, 0.017074944, -0.013740862, -0.0581761, 0.007300959, -0.067057945, -0.020720758, 0.012841731, -0.04756156, 0.0021186539, 0.024390997, -0.12731493, 0.020450147, -0.10544886, -0.012563129, 0.016128588, 0.022112805, 0.0016699508, -0.041454416, -0.050097782, 0.023624381, 0.021414608, 0.010862117, 0.022948518, 0.01616287, 0.024106678, -0.004814436, 0.01716573, 0.02158132, 0.033721525, 0.023755817, 0.019472327, 0.019792652, 0.024024595, 0.018468361, 0.022534216, 0.023944147, 0.021315161, 0.023100762, 0.016004061, 0.01362498, 0.009721371, -0.016612755, 0.06735611, 0.010856635, 0.017781463, -0.031345665, 0.010332767, 0.021145493, -0.059006806, 0.0065387404, 0.031120745, 0.0124440575, 0.024225498, 0.023111375, 0.016047712, -0.0438626, 0.015576449, -0.030827574, 0.020252839, 0.0059739007, 0.021985976, 0.023274107, 0.0123176845, 0.021327365, 0.020847758], [0.092397824, 0.010885052, 0.15899038, -0.052963305, -0.08335268, -0.17555805, -0.25623345, 0.2406801, -0.18177387, -0.04935786, 0.3312358, -0.034949765], [-0.06812709, 0.16576411, -0.014511055, -0.024664216, 0.025989572, -0.13014328, 0.014726688, -0.056020617, -0.033198282, 0.057824027, -0.031178422, -0.019477662, 0.089796714, 0.027826851, -0.0046078293], [-0.1707624, -0.03188486, -0.043904174, -0.12992503, 0.3377993, -0.11824347, -0.12905066, -0.11389004, -0.1281808, 0.04384587, -0.15101247, -0.1089354, -0.17763165, -0.21502472, 0.17679124, -0.14402895, 0.3310597, 0.0661649, 0.16699019, 0.061789338, 0.19588874, -0.016437959, -0.12308673, -0.047790114, 0.38153, -0.042131826, 0.3602781, -0.024387415, -0.1527496, -0.16463818, 0.35076046, -0.04539984, -0.19380246], [0.4646895, -0.12283131, 0.07192345, -0.0032360374, -0.044157166, 0.096394986, 0.08203118, 0.064755194, 0.13171992, 0.038593303, -0.009351624, 0.02831881, -0.06647194, -0.06250422, -0.1323251, -0.062849335, 0.08162506, -0.12724797, 0.030010786, -0.08678455, -0.22082905, -0.0878615, -0.083273016, -0.05310726, -0.068928234, -0.052658245, -0.09507966, 0.042745702, 0.040452443, 0.20623586], [-0.00085589685, -0.00010643049, -0.0011129505, -0.0012884723, -0.0015625564, 0.0010703993, 0.01719224, -0.005707262, -0.0041505857, -0.0025925084, -0.000438262, -0.0004307338, -0.001662929, -0.00268489, -0.0025822085, 0.010076375, -0.00017013104, -0.0029926396], [0.069579184, 0.18210766, -0.3616723, -0.088876955, -0.18649745, -0.3788723, -0.18047813, 0.2926745, 0.5268984, -0.16021423, -0.34683472, -0.06809939, -0.20017847, 0.062054276, 0.15824795, -0.3462471, 0.34050938, -0.1787144, -0.034089193, 0.12423755, -0.22877532, 0.12988056, -0.22841294, 0.17627646, 0.47869098, 0.44680575], [-0.10305055, -0.050972026, -0.07272482, -0.09859805, 0.06400252, -0.017182393, 0.027050883, 0.3169184, -0.05268415, -0.035284422, 0.022524409], [0.04069925, 0.027466299, -0.15717494, -0.091271445, -0.08629348, -0.19693212, -0.033993147, 0.2678138, -0.079961345, -0.099489056, 0.19169798, 0.11251028, 0.012169616, 0.092758685]]
#
# for i in range(len(x_pos)):
#     for j in range(len(y_pos)):
#         if i == j :
#             for t in range(len(x_pos[i])):
#                 f = open('test.txt', 'a')
#                 f.write(str(x_pos[i][t]) + str(' ') + str(y_pos[j][t]))
#                 f.write("\n")

normal_index = []
image_index =[]
mutation_index_1 =[]
mutation_index_2 =[]
mutation_index_3 =[]
mutation_index_4 =[]
mutation_index_5 =[]
mutation_index_6 =[]
mutation_index_7 =[]
mutation_index_8 =[]

normal_index.append([t for t, x in enumerate(true_label) if x == 0])
mutation_index_1.append([t for t, x in enumerate(true_label) if x == 1])
mutation_index_2.append([t for t, x in enumerate(true_label) if x == 2])
mutation_index_3.append([t for t, x in enumerate(true_label) if x == 3])
mutation_index_4.append([t for t, x in enumerate(true_label) if x == 4])
mutation_index_5.append([t for t, x in enumerate(true_label) if x == 5])
mutation_index_6.append([t for t, x in enumerate(true_label) if x == 6])
mutation_index_7.append([t for t, x in enumerate(true_label) if x == 7])
mutation_index_8.append([t for t, x in enumerate(true_label) if x == 8])

image_index.append(normal_index)
image_index.append(mutation_index_1)
image_index.append(mutation_index_2)
image_index.append(mutation_index_3)
image_index.append(mutation_index_4)
image_index.append(mutation_index_5)
image_index.append(mutation_index_6)
image_index.append(mutation_index_7)
image_index.append(mutation_index_8)


pca = PCA(n_components=2)     #输出两维
data_pca_list = pca.fit_transform(vgg16_feature_list_np)

for i, label in enumerate(true_label):
    if label == 0:
        plt.scatter(data_pca_list[i][0], data_pca_list[i][1], c='black')
    if label == 1:
        plt.scatter(data_pca_list[i][0], data_pca_list[i][1], c='blue')
    if label == 2:
        plt.scatter(data_pca_list[i][0], data_pca_list[i][1], c='brown')
    if label == 3:
        plt.scatter(data_pca_list[i][0], data_pca_list[i][1], c='green')
    if label == 4:
        plt.scatter(data_pca_list[i][0], data_pca_list[i][1], c='pink')
    if label == 5:
        plt.scatter(data_pca_list[i][0], data_pca_list[i][1], c='yellow')
    if label == 6:
        plt.scatter(data_pca_list[i][0], data_pca_list[i][1], c='skyblue')
    if label == 7:
        plt.scatter(data_pca_list[i][0], data_pca_list[i][1], c='purple')
    if label == 8:
        plt.scatter(data_pca_list[i][0], data_pca_list[i][1], c='red')

plt.tight_layout()
plt.savefig('Trtuth_Distribution.png')
plt.show()




